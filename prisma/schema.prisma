// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// ?는 필수적이지 않음 옵션 일 경우
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
  id                Int            @id @default(autoincrement())
  phone             Int?           @unique
  email             String?        @unique
  name              String     
  nicName           String?        @unique
  avatar            String?
  school            String
  services          Service[]       @relation(name: "services")
  serviceUser       Service[]       @relation(name: "serviceUser")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  writtenReviews    Review[]        @relation(name: "WrittenReviews")
  receivedReviews   Review[]        @relation(name: "ReceivedReviews")  
  liked             Liked[] 
  chats             Chat[]
  rooms             Room[]
}


model Service {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(name: "services", fields: [userId], references: [id], onDelete: Cascade)
  userId            Int         // 모임 글 작성한 사용자
  serviceUser       User?       @relation(name: "serviceUser", fields: [serviceUserId], references: [id], onDelete: Cascade)
  serviceUserId     Int?        // 모임 참여한 사용자
  title             String      //모임 이름
  content           String      @db.MediumText
  maxNum            Int
  liked             Liked[]
  reivew            Review[]  
  room              Room[]
  category          Category?
  status            Status?

  @@index([userId])
  @@index([serviceUserId])

}

enum Category {
  Sport
  Trip
  Study
  Culture
  Volunteer
  Club
  Food
  Contest
}


enum Status {
  Ing
  End
  Recent
  Old
  Max
  Min
}

model Liked {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int

  @@index([serviceId])
  @@index([userId])
}

model Room {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  realName        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chatInvisibleTo Int?
  Service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       Int 
  users User[]
  chats Chat[]

  @@index([serviceId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  chat      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  Room   Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int?

  @@index([userId])
  @@index([roomId])
}

model Review {
  id        Int      @id @default(autoincrement())
  score1        Int      @default(3)
  score2        Int      @default(3)
  score3        Int      @default(3)
  score4        Int      @default(3)  
  createdBy      User    @relation(name: "WrittenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById    Int      // 요청자(리뷰 쓰는)
  createdFor     User?    @relation(name: "ReceivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId   Int      // 제공자(리뷰 받는)
  serviceId      Int?      
  serviceInfo    Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([createdById])
  @@index([createdForId])
  @@index([serviceId])
  
}

